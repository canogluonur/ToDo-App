apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: flaskapp
  name: flaskapp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: mongo
    spec:
      containers:
        - image: mvertes/alpine-mongo:latest
          name: mongo
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - mountPath: /data/db/
              name: flaskapp
      restartPolicy: Always
      volumes:
        - name: flaskapp
          persistentVolumeClaim:
            claimName: flaskapp
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -o k8s/
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: mongo
  name: mongo
spec:
  type: NodePort
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
      nodePort: 30001
  selector:
    io.kompose.service: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: todo-flaskapp
  name: todo-flaskapp
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: todo-flaskapp
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.service: todo-flaskapp
    spec:
      initContainers:
        - name: flaskapp-init
          image: mvertes/alpine-mongo:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: MONGO_HOST
              value: mongo
            - name: MONGO_PORT
              value: "27017"
          command:
            - sh
            - -c
            - until mongo --eval 'db.runCommand("ping").ok' ${MONGO_HOST}:${MONGO_PORT}/test --quiet; do echo -e "waiting for MongoDB"; sleep 5; done; echo -e "MongoDB ready, starting ToDo-FlaskApp now";
      containers:
        - env:
            - name: FLASK_ENV
              value: development
            - name: MONGO_HOST
              value: mongo
            - name: MONGO_PORT
              value: "27017"
            - name: PORT
              value: "5000"
          image: coolboi567/todo-flaskapp:latest
          imagePullPolicy: Always
          name: flask-app
          ports:
            - containerPort: 5000
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: todo-flaskapp
  name: todo-flaskapp
spec:
  type: NodePort
  ports:
    - name: "5000"
      port: 5000
      targetPort: 5000
      nodePort: 30002	
  selector:
    io.kompose.service: todo-flaskapp


